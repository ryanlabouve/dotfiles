
" This will be passed down to my children
" if you are reading this in the future (probably year 2214)
" and the humans are still winning against the robots, hopefully
" this helps.
"
" <3 Ryan LaBouve, 2015
"

" ~*~*~*~*~*  General Config ~*~*~*~*~

set clipboard=unnamed

set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase
set smartcase

set laststatus=2  " Always display the status line
set backspace=2   " Backspace deletes like most programs in insert mode
set nobackup
set nowritebackup
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
" http://stackoverflow.com/questions/1675688/make-vim-show-all-white-spaces-as-a-character
set list
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set autoindent    " turns it on
set smartindent   " does the right thing (mostly) in

" http://dougblack.io/words/a-good-vimrc.html

" UI STUFF
set number              " show line numbers
set relativenumber
set showcmd             " show command in bottom bar
set showmatch           " highlight matching [{()}]

set autoread

set showbreak=↪
:set listchars=eol:·,tab:>-,trail:~,extends:>,precedes:<

" My leader is `,` This is quite important
let mapleader=","


" Get out of here colon
" You wastin mah time
" http://vim.wikia.com/wiki/Map_semicolon_to_colon
nnoremap ; :


" Folding
"
set foldmethod=indent
set foldnestmax=1
set nofoldenable
set foldlevel=2

" Navigate folds
nnoremap <silent> <leader>zj :call NextClosedFold('j')<cr>
nnoremap <silent> <leader>zk :call NextClosedFold('k')<cr>
function! NextClosedFold(dir)
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
        exe cmd
        let [l0, l] = [l, line('.')]
        let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
endfunction

" To install plug: (https://github.com/junegunn/vim-plug)
" curl -fLo ~/.local/share/nvim/site/autoload/plug.vim
" --create-dirs \
"      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" To Install Plugins:
" :PlugInstall
" :PlugUpgrade
"
call plug#begin('~/.local/share/nvim/plugged')

" ::GoInstallBinaries and :GoUpdateBinaries
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue'] }
Plug 'fatih/vim-go'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ctrlpvim/ctrlp.vim'

Plug 'dustinfarris/vim-htmlbars-inline-syntax'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-rails'

Plug 'tomtom/tcomment_vim' " gcc to comment out code
Plug 'rking/ag.vim'
Plug 'editorconfig/editorconfig-vim'        " respect projects rules
" Plug 'mxw/vim-jsx'
Plug 'othree/yajs.vim'
Plug 'othree/yats.vim'
Plug 'othree/html5.vim'
" Plug 'bling/vim-airline'
Plug 'chrismccord/bclose.vim'               " For closing buffers

" Plug 'tmux-plugins/vim-tmux-focus-events'
" Plug 'wesQ3/vim-windowswap'
Plug 'mustache/vim-mustache-handlebars'
Plug 'mhartington/oceanic-next'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'nsf/gocode', { 'rtp': 'nvim', 'do': '~/.config/nvim/plugged/gocode/nvim/symlink.sh' }

Plug 'majutsushi/tagbar'

call plug#end()

" A quicker way to reload vimrc
noremap <Leader>r :so ~/.config/nvim/init.vim<cr>

" ## Buffer Stuff, (close, next, prev)
"   - Mimics command+w
noremap <leader>W :Bclose<cr>
noremap <leader>n :bn<cr>
"  - p makes more sense, n is convinient when going back and forth
noremap <leader>p :bp<cr>
noremap <leader>n :bp<cr>

" show name of current file
map <leader>@ :echo @%<cr>

" set cursorline
" hi CursorLine term=bold cterm=bold
" hi Search guibg=#000000 guifg=#000000

" NERDTree
noremap <C-n> :NERDTreeToggle<CR>
let NERDTreeIgnore = ['tmp', '.yardoc', 'pkg']
let NERDTreeShowHidden=1

" How can I close vim if the only window left open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree")) | q | endif

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')

let g:jsx_ext_required = 0 " Allow JSX in normal JS files


" Get dat airline bar going
let g:airline#extensions#tabline#enabled = 1

let g:ctrlp_custom_ignore = '\v[\/](node_modules|vendor|target|dist|tmp|bower_components)|(\.(swp|ico|git|svn))$'

" ## Splitting Stuff
"
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Resizing
" -- up and down
nnoremap <silent> <Leader>+ :exe "resize +10"<CR>
nnoremap <silent> <Leader>- :exe "resize -10"<CR>
" -- left and right
nnoremap <Leader>> :exe "vertical resize +10"<CR>
nnoremap <Leader>< :vertical resize -10<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

nnoremap <C-f> :Ag   . <Left><Left><Left><Left>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

filetype plugin indent on

" https://github.com/skwp/dotfiles/blob/master/vimrc
" ================ Scrolling ========================

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Hat Tips:
" - https://github.com/thoughtbot/dotfiles/blob/master/vimrc


let g:go_fmt_command = "goimports"
au FileType go set nolist textwidth=0


" Ember Stuff
" `{{` tab should autocomplete
" (https://github.com/mustache/vim-mustache-handlebars)
let g:mustache_abbreviations = 1
"" [[ and ]] jump around to tags

let g:deoplete#enable_at_startup = 1
filetype plugin on

" neocomplete like
set completeopt+=noinsert
" deoplete.nvim recommend
set completeopt+=noselect
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#use_cache = 1
nmap <leader>t :TagbarToggle<CR>


" https://github.com/mhartington/oceanic-next
" For Neovim 0.1.3 and 0.1.4
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" Or if you have Neovim >= 0.1.5
 set termguicolors

" Theme
syntax enable
colorscheme OceanicNext
let g:airline_theme='oceanicnext'

" when running at every change you may want to disable quickfix
let g:prettier#quickfix_enabled = 0

let g:prettier#autoformat = 0
autocmd BufWritePre,TextChanged,InsertLeave *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync
